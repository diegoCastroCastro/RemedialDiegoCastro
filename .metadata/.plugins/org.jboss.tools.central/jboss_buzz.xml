<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Tips for writing portable assembler with GNU Assembler (GAS)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oS4nJhJtZ0E/" /><category term="Linux" /><category term="Open source" /><category term="Uncategorized" /><category term="assembly code" /><category term="GAS" /><category term="GNU Assembler" /><category term="portable assembler" /><author><name>Nick Clifton</name></author><id>https://developers.redhat.com/blog/?p=818127</id><updated>2021-02-26T08:00:00Z</updated><published>2021-02-26T08:00:00Z</published><content type="html">&lt;p&gt;Writing assembly code is straightforward when you are familiar with the targeted architecture&amp;#8217;s instruction set, but what if you need to write the code for more than one architecture? For example, you might want to test whether a particular assembler feature is available, or generate an object file for use with another tool. Writing assembly source code that can work on multiple architectures is not so simple.&lt;/p&gt; &lt;p&gt;This article describes common types of problems encountered when working with assembly code, and the techniques to overcome them. You will learn how to address problems with comments, data, symbols, instructions, and sections in assembly code. To get you started, the &lt;a target="_blank" rel="nofollow" href="https://nickc.fedorapeople.org/neutral.s"&gt;Portable assembler demo source file&lt;/a&gt; provides many examples of GNU Assembler (GAS) assembly code. I&amp;#8217;ll use a few of the examples in this article.&lt;/p&gt; &lt;h2&gt;Problems with comments&lt;/h2&gt; &lt;p&gt;There is no architecture-neutral way of creating a prefixed line comment. As a result,&lt;/p&gt; &lt;pre&gt;  # This is a comment &lt;/pre&gt; &lt;p&gt;might or might not work, depending on the target. (On some architectures the hash character is actually part of the instruction set, similarly for the semicolon and colon characters.)&lt;/p&gt; &lt;p&gt;Instead, the safe approach is to use C-like comments:&lt;/p&gt; &lt;pre&gt;  /* This is a comment. */ &lt;/pre&gt; &lt;p&gt;But keep in mind that these comments cannot be nested:&lt;/p&gt; &lt;pre&gt;  /* This is /* not a */ valid comment. */ &lt;/pre&gt; &lt;h2&gt;Problems with data&lt;/h2&gt; &lt;p&gt;The size of individual data items, such as integers, pointers, floats, and so on, varies from one architecture to another. Take the following example:&lt;/p&gt; &lt;pre&gt;  .data   .word 0x12345678 &lt;/pre&gt; &lt;p&gt;This code would fail to assemble on machines where a word was less than 4 bytes long. (Fortunately, the &lt;code&gt;.data&lt;/code&gt; directive is universal.)&lt;/p&gt; &lt;p&gt;A more reliable way to insert specific integer values is to use the &lt;code&gt;.dc.&amp;#60;letter&amp;#62;&lt;/code&gt; directives, where &lt;code&gt;&amp;#60;letter&amp;#62;&lt;/code&gt; is &lt;code&gt;b&lt;/code&gt; for bytes, &lt;code&gt;w&lt;/code&gt; for 16-bit values, and &lt;code&gt;l&lt;/code&gt; for 32-bit values. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0x78   .dc.w 0x5678   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;This assembly code works on all targets, regardless of their word size.&lt;/p&gt; &lt;h3&gt;Inserting 64-bit integer values&lt;/h3&gt; &lt;p&gt;Oddly, the directive for 64-bit values does not follow the same naming scheme. Instead the directive to use is &lt;code&gt;.quad&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;  .quad 0x1234567890abcdef&lt;/pre&gt; &lt;h3&gt;Endian-ness&lt;/h3&gt; &lt;p&gt;All values are stored in the target&amp;#8217;s endian format, which is usually the right approach. However, when fixed ordering is required, specifying multiple single-byte values is the way to go:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0x78, 0x56, 0x34, 0x12 &lt;/pre&gt; &lt;p&gt;This code produces a little-endian ordering of bytes, even on a big-endian architecture. You cannot however create multi-byte bit patterns on targets where the byte size is larger than 8 bits (for example, the Texas Instrument&amp;#8217;s TIC54x.) Outside assistance is the only way to handle this particular situation:&lt;/p&gt; &lt;pre&gt;  .data   .ifdef big_bytes   .dc.b 0x5678, 0x1234   .else   .dc.b 0x78, 0x56, 0x34, 0x12   .endif &lt;/pre&gt; &lt;p&gt;This solution works provided the symbol, &lt;code&gt;big_bytes&lt;/code&gt;, is defined for architectures with 16-bit bytes and not otherwise. (Symbols can be defined on the GAS command line with &lt;code&gt;--defsym &amp;#60;name&amp;#62;=&amp;#60;value&amp;#62;&lt;/code&gt;.)&lt;/p&gt; &lt;h3&gt;Alignment requirements&lt;/h3&gt; &lt;p&gt;Another problem with directives that store data values is that they can have alignment requirements. For example:&lt;/p&gt; &lt;pre&gt;  .data   .dc.b 0xff   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;This example fails to assemble for the SH target because the 4 bytes in &lt;code&gt;0x12345678&lt;/code&gt; are not being stored on a 4-byte aligned boundary. You can solve this issue with an alignment directive, but be cautious of using &lt;code&gt;.align&lt;/code&gt;, which has target-specific semantics. Instead, use either the &lt;code&gt;.balign&lt;/code&gt; or &lt;code&gt;.p2align&lt;/code&gt; directives:&lt;/p&gt; &lt;pre&gt;.data   .dc.b 0xff   .balign 4   .dc.l 0x12345678 &lt;/pre&gt; &lt;p&gt;Note that this code introduces a gap between the &lt;code&gt;0xff&lt;/code&gt; byte and the &lt;code&gt;0x12345678&lt;/code&gt; word.&lt;/p&gt; &lt;h3&gt;Fixed values&lt;/h3&gt; &lt;p&gt;GAS supports simple arithmetic and logical operations on symbols and constants. For most directives, the result must be a fixed value. Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;  .dc.b (val &amp;#38; 0xff), (val &amp;#62;&amp;#62; 8) &amp;#38; 0xff &lt;/pre&gt; &lt;p&gt;This code works provided that the symbol &lt;code&gt;val&lt;/code&gt; has a defined value when the directive is evaluated.&lt;/p&gt; &lt;h3&gt;Storing strings&lt;/h3&gt; &lt;p&gt;Strings can be stored easily, but beware that the &lt;code&gt;.ascii&lt;/code&gt; directive does not store a terminating NUL byte. For C like strings use the &lt;code&gt;.asciz &lt;/code&gt;directive instead:&lt;/p&gt; &lt;pre&gt;  .ascii "this string has no NUL byte at the end"   .asciz "this string does" &lt;/pre&gt; &lt;h2&gt;Problems with symbols&lt;/h2&gt; &lt;p&gt;Labels and symbols are defined in various ways, all of which work across most targets:&lt;/p&gt; &lt;pre&gt;  val = 0x1234   .equiv here, .   .equiv there, here + 4   this_is_a_label: &lt;/pre&gt; &lt;p&gt;For comparability with the HPPA assembler however, it is necessary to start a label&amp;#8217;s name in the first column of a line. Plus, by extension, the first column on any line needs to contain a whitespace character if no label is being defined.&lt;/p&gt; &lt;p&gt;If a symbol or label holds an address, then it is safest to insert it into the code using the &lt;code&gt;.dc.a&lt;/code&gt; directive, like so:&lt;/p&gt; &lt;pre&gt; .dc.a this_is_a_label &lt;/pre&gt; &lt;p&gt;You can perform simple addition or subtraction operations on an address, but more complicated operations are often not supported. Calculating the difference between two labels usually works only when they are defined in the same section, and sometimes not even then:&lt;/p&gt; &lt;pre&gt; .dc.a label1 - 2 /* This will work. */   .dc.a label1 - label2 /* This might not work. */ &lt;/pre&gt; &lt;h2&gt;Problems with instructions&lt;/h2&gt; &lt;p&gt;Typically, instructions are specific to individual architectures. As a result, you cannot write a generic assembler source file that involves code. Starting with GAS 2.35 however, there is a new pseudo-op instruction (&lt;code&gt;.nop&lt;/code&gt;), which generates a no-op instruction on any target:&lt;/p&gt; &lt;pre&gt;  .text   .nop /* This is a real instruction. */ &lt;/pre&gt; &lt;h2&gt;Problems with sections&lt;/h2&gt; &lt;p&gt;All architectures accept the section names &lt;code&gt;.text&lt;/code&gt;, &lt;code&gt;.data&lt;/code&gt;, and &lt;code&gt;.bss&lt;/code&gt;. The old AOUT file format only supports these names. More modern formats such as Portable Executable (PE) and Executable and Linkable Format (ELF) support arbitrary section names. When defining new sections, be aware that the &lt;code&gt;.section&lt;/code&gt; directive for ELF targets accepts more arguments than does the PE version:&lt;/p&gt; &lt;pre&gt; .section name   /* See note 1. */   .section name, "flags"   /* See note 2. */   .section name, "flags", %type  /* See note 3. */ &lt;/pre&gt; &lt;p&gt;Notes:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;This form fails on targets where the section flags are compulsory.&lt;/li&gt; &lt;li&gt;This form works for both PE-based and ELF-based targets, although the flags are different.&lt;/li&gt; &lt;li&gt;This form only works on ELF-based targets. Note the use of the &lt;em&gt;%&lt;/em&gt; character instead of the &lt;em&gt;@&lt;/em&gt; character.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article addressed common problems writing portable assembly code and provided solutions and examples. In summary, writing portable assembler is hard to do and best kept simple, and persistence is the key.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#38;linkname=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F26%2Ftips-for-writing-portable-assembler-with-gnu-assembler-gas%2F&amp;#038;title=Tips%20for%20writing%20portable%20assembler%20with%20GNU%20Assembler%20%28GAS%29" data-a2a-url="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/" data-a2a-title="Tips for writing portable assembler with GNU Assembler (GAS)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/"&gt;Tips for writing portable assembler with GNU Assembler (GAS)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oS4nJhJtZ0E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Writing assembly code is straightforward when you are familiar with the targeted architecture&amp;#8217;s instruction set, but what if you need to write the code for more than one architecture? For example, you might want to test whether a particular assembler feature is available, or generate an object file for use with another tool. Writing assembly [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/"&gt;Tips for writing portable assembler with GNU Assembler (GAS)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">818127</post-id><dc:creator>Nick Clifton</dc:creator><dc:date>2021-02-26T08:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/26/tips-for-writing-portable-assembler-with-gnu-assembler-gas/</feedburner:origLink></entry><entry><title type="html">Eclipse Vert.x 3.9.6 released!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/575XFa7CT_E/eclipse-vert-x-3-9-6" /><author><name>Julien Viet</name></author><id>https://vertx.io/blog/eclipse-vert-x-3-9-6</id><updated>2021-02-26T00:00:00Z</updated><content type="html">Eclipse Vert.x version 3.9.6 has just been released. It fixes quite a few bugs that have been reported by the community.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/575XFa7CT_E" height="1" width="1" alt=""/&gt;</content><dc:creator>Julien Viet</dc:creator><feedburner:origLink>https://vertx.io/blog/eclipse-vert-x-3-9-6</feedburner:origLink></entry><entry><title type="html">Migrating jBPM images secured by LDAP to Elytron</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sTStztYN0xY/migrating-jbpm-images-secured-by-ldap-to-elytron.html" /><author><name>Gonzalo Muñoz Fernández</name></author><id>https://blog.kie.org/2021/02/migrating-jbpm-images-secured-by-ldap-to-elytron.html</id><updated>2021-02-25T18:40:01Z</updated><content type="html">“It’s like having wings, like flying sometimes because you go off into another realm” (Paul Rodgers) is the new security framework offered by JBoss EAP/Wildfly, which tries to unify security management and application access in a single subsystem.  Legacy security subsystem has been deprecated and maybe removed or limited in future versions of JBoss EAP/Wildfly, while now it’s shipping Elytron as its replacement. In this post, we cover how to migrate current jBPM images for and (includes also Business-Central) from legacy (with security subsystem based on JAAS login modules) to Elytron. The new images should incorporate the configuration for LDAP authentication and authorization instead of the default one which is properties-based.  For each image, we are going to follow a different strategy: * Partial migration: maintains the legacy login modules at the security subsystem but exposes them to Elytron.  * Full migration: Login modules are completely replaced by Security Domain at Elytron. All the code and configuration for these examples can be found . ENVIRONMENT SETUP Our test class (with scenarios for testing authentication and process variable change authorization in jbpm) will make use of testcontainers: * populated with ldif (LDAP Data Interchange Format) containing fixture; * KIE Server plus a business application, that will be built on-the-fly, with a multi-stage strategy in the dockerfile: * First, maven installs the kjar (other option would have been to fetch it from GitHub); * Then, the jboss-cli scripts tune standalone configuration including LDAP support and Elytron; In this setup, both containers will share the same network and will communicate with each other using the network-alias. INFO: The business application used in the test is the same described in the following post, but it’s now using Wildfly: . LDAP STRUCTURE  For this example, we will use image as the LDAP backend. We set up  the following users and roles structure within it: We will start the openLDAP container with following environment variables: withEnv("LDAP_DOMAIN","jbpm.org"); withEnv("LDAP_ADMIN_PASSWORD","admin"); //default On the side jBPM, we need to define two files for LDAP authentication and role mapping: * jbpm.user.info.properties: ldap.user.ctx=ou\=People,dc\=jbpm,dc\=org ldap.role.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.filter=(uid\={0}) ldap.role.filter=(cn\={0}) * jbpm.usergroup.callback.properties: ldap.user.ctx=ou\=People,dc\=jbpm,dc\=org ldap.role.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.roles.ctx=ou\=Roles,dc\=jbpm,dc\=org ldap.user.filter=(uid\={0}) ldap.role.filter=(cn\={0}) ldap.user.roles.filter=(member\={0}) ldap.bind.user=cn\=admin,dc\=jbpm,dc\=org ldap.bind.pwd=admin java.naming.provider.url=ldap://ldap-alias:389 TIP: Notice that if the LDAP server doesn’t allow anonymous binding (as in the current image), then ldap.bind.user and ldap.bind.pwd parameters are mandatory in this file. PARTIAL MIGRATION In this case, we are going to use image as it uses KieLoginModule for business-central.war and jbpm-casemgmt.war deployments. The is in charge of keeping BASIC Authorization header as a principal for the upcoming REST API invocations from these clients. So, the idea is to add a new legacy login module for LDAP auth, belonging to WildFly’s security subsystem, and then expose this domain as an Elytron security realm so that it can be part of the Elytron subsystem. We’ll do these actions by using the jboss-cli script:   TIP: jboss-cli is a script available by default in WildFly’s bin directory. You can find it in .sh and .bat files, so you can run on Unix based OS and Windows respectively. 1. Let’s define a LdapExtLoginModule that matches our LDAP configuration: /subsystem=security/security-domain=other/authentication=classic/login-module=LdapExtended:add(code="org.jboss.security.auth.spi.LdapExtLoginModule", flag=required, module-options=[ \ ("searchScope" =&gt; "SUBTREE_SCOPE"), \ ("java.naming.factory.initial" =&gt; "com.sun.jndi.ldap.LdapCtxFactory"), \ ("java.naming.provider.url" =&gt; "ldap://ldap-alias:389"), \ ("roleAttributeIsDN" =&gt; "true"), \ ("rolesCtxDN" =&gt; "ou=Roles,dc=jbpm,dc=org"), \ ("roleFilter" =&gt; "(member=uid={0},ou=People,dc=jbpm,dc=org)"), \ ("roleNameAttributeID" =&gt; "cn"), \ ("searchTimeLimit" =&gt; "5000"), \ ("java.naming.security.authentication" =&gt; "simple"), \ ("roleRecursion" =&gt; "0"), \ ("java.naming.referral" =&gt; "follow"), \ ("bindDN" =&gt; "cn=admin,dc=jbpm,dc=org"), \ ("bindCredential" =&gt; "admin"), \ ("baseCtxDN" =&gt; "ou=People,dc=jbpm,dc=org"), \ ("allowEmptyPasswords" =&gt; "false"), \ ("throwValidateError" =&gt; "true"), \ ("baseFilter" =&gt; "(uid={0})")]) Notice that the security-domain has to be called other because it is the same name protected by the KIE application security domain, as you can see inthe images, in the file . This name is the same as preconfigured security domain for other login modules, so it’s better to remove these legacy ones: /subsystem=security/security-domain=other/authentication=classic/login-module=UsersRoles:remove /subsystem=security/security-domain=other/authentication=classic/login-module=Remoting:remove /subsystem=security/security-domain=other/authentication=classic/login-module=RealmDirect:remove 2. Next, we will link legacy security domain (other) with a new elytron-realm, that we are going to call LegacyRealm: /subsystem=security/elytron-realm=LegacyRealm:add(legacy-jaas-config=other) This way we are creating a dependency from the legacy security subsystem into the elytron subsystem. 3. This LegacyRealm will be part of the new elytron security domain we are going to name as KIEDomain: /subsystem=elytron/security-domain=KIEDomain:add(realms=[{realm=LegacyRealm}], default-realm=LegacyRealm, permission-mapper=default-permission-mapper) TIP: In this case, there is no need for a simple-role-decoder to associate roles, as these ones are retrieved by legacy login modules. 4. Configure an http-authentication-factory (here called ldap-http-auth) for the KIEDomain and add BASIC (linked to LegacyRealm) and FORM authentication mechanisms used by KIE application to it. /subsystem=elytron/http-authentication-factory=ldap-http-auth:add(http-server-mechanism-factory=global,security-domain=KIEDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=LegacyRealm}]}, {mechanism-name=FORM}]) 5. Next, add it to undertow subsystem: /subsystem=undertow/application-security-domain=KIEDomain:add(http-authentication-factory=ldap-http-auth) /subsystem=undertow:write-attribute(name=default-security-domain, value=KIEDomain) It’s time to check that everything worked fine: at runtime, from jboss-cli, read the protected deployments (remember that other is the name for the security-domain in the jboss-web.xml of these wars): /subsystem=undertow/application-security-domain=other:read-resource(include-runtime=true) { "outcome" =&gt; "success", "result" =&gt; { "enable-jacc" =&gt; false, "enable-jaspi" =&gt; true, "http-authentication-factory" =&gt; "ldap-http-auth", "integrated-jaspi" =&gt; true, "override-deployment-config" =&gt; false, "referencing-deployments" =&gt; [ "jbpm-casemgmt.war", "business-central.war", "kie-server.war" ], "security-domain" =&gt; undefined, "setting" =&gt; undefined } } For the authorization scenarios, the authenticated subject should contain the principals represented on the image below. These are populated by LoginModules, and will be used by JACC mechanism to obtain the roles for the IdentityProvider: FULL MIGRATION In the case of image, only the kie-server.war is present (no KieLoginModule dependencies) and therefore, it’s possible to make a full migration to Elytron. Elytron is based on a security-domain concept,  in other words, on the representation of a security policy. It is backed by security-realm/s, and resources to make transformations (role-decoder, permission-mapper and others). In this practical example, we are going to use Elytron LDAP Security Realm to access LDAP backend and verify credentials as well as obtain attributes associated with an identity. More complex scenarios would allow having several security realms, and by means of a security-mapper, determine which attributes would be retrieved from each security realm. 1. First, let’s remove the security-domain called other at legacy security subsystem, as it will be no longer used: /subsystem=security/security-domain=other:remove 2. Let’s add elytron subsystem from scratch (if not present): /extension=org.wildfly.extension.elytron:add /subsystem=elytron:add 3. Define the directory context to connect with LDAP and the LDAP Realm into Elytron: /subsystem=elytron/dir-context=ldap-connection:add(url=ldap://ldap-alias:389, principal="cn=admin,dc=jbpm,dc=org", credential-reference={clear-text=admin}) /subsystem=elytron/ldap-realm="KieLdap":add(dir-context=ldap-connection, \ direct-verification=true, \ identity-mapping={search-base-dn="ou=People,dc=jbpm,dc=org", \ rdn-identifier="uid", \ attribute-mapping=[{filter-base-dn="ou=Roles,dc=jbpm,dc=org",filter="(member=uid={0},ou=People,dc=jbpm,dc=org)",from="cn",to="Roles"}]}) Notice that the LDAP connection needs the principal (bindDN) and its password as the used LDAP server doesn’t allow anonymous binding. Retrieved roles are mapped from “cn” to “Roles”, where the RoleDecoder will take them. This RoleDecoder component (as its name indicates) is in charge of decoding user’s roles. Our simple-role-decoder (from-roles-attribute) is pretty straightforward: roles are obtained directly from the attribute “Roles”. &lt;simple-role-decoder name="from-roles-attribute" attribute="Roles"/&gt; 4. Create the security domain in Elytron, named KIEDomain, (any name is valid, as we will map it later to the one defined at application level) and add it the previous LDAP realm, and the default-permission-mapper: /subsystem=elytron/security-domain=KIEDomain:add(realms=[{realm=KieLdap,role-decoder=from-roles-attribute}], default-realm="KieLdap", permission-mapper=default-permission-mapper) TIP: The default-permission-mapper gives “login permission” to all users but the one with anonymous principal, excluded for login. This means that it doesn’t matter if the verification with the backend LDAP is successful (and valid roles), login action won’t be allowed. &lt;permission-mapping&gt; &lt;principal name="anonymous"/&gt; &lt;!-- No permissions: Deny any permission to anonymous! --&gt; &lt;/permission-mapping&gt; It will produce following logs: Identity [anonymous] attributes are: Attribute [Roles] value [user]. Authorizing principal anonymous. Authorizing against the following attributes: [Roles] =&gt; [user] Permission mapping: identity [anonymous] with roles [user] implies ("org.wildfly.security.auth.permission.LoginPermission" "") = false Authorization failed - identity does not have required LoginPermission 5. Next, we need to define the HTTP authentication factory: for kie-server, it’s needed to link the mechanisms for BASIC and FORM authentications: /subsystem=elytron/http-authentication-factory=ldap-http-auth:add(http-server-mechanism-factory=global,security-domain=KIEDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=KieLdap}]}, {mechanism-name=FORM}]) 6. Map the application security domain (other, as it is the one specified at jboss-web.xml) to our Elytron security domain (KIEDomain) for the undertow and ejb3 subsystems: /subsystem=undertow/application-security-domain=other:add(security-domain=KIEDomain) /subsystem=ejb3/application-security-domain=other:add(security-domain=KIEDomain) 7. Update the messaging-activemq (JMS) to point to our Elytron security domain (KIEDomain) and undefine (remove) the default security domain given by WildFly: /subsystem=messaging-activemq/server=default:write-attribute(name=elytron-domain, value=KIEDomain) /subsystem=messaging-activemq/server=default:undefine-attribute(name=security-domain) 8. Disable JACC from legacy security subsystem and enable it at elytron by adding the default policy /subsystem=security:write-attribute(name=initialize-jacc, value=false) /subsystem=elytron/policy=jacc:add(jacc-policy={}) That’s all. Now, let’s see how it works: After a request to the KIE server is filtered and assigned to HTTP mechanism, it’s assigned to the KieLdap Realm. Once a user has been authenticated against LDAP retrieving its roles, the security domain produces a security identity as you can see on the logs below: Obtaining authorization identity attributes for principal [Bartlet]: Identity [Bartlet] attributes are: Attribute [Roles] value [President]. Attribute [Roles] value [kie-server]. These roles will be retrieved by JACC IdentityProvider to authorize actions inside KIE server. CONCLUSION Legacy security subsystem has been deprecated from EAP/Wildfly, and in the future, it will be totally removed. Then, Elytron will become the one and unified subsystem for authentication and authorization. For easing the transition, a partial migration is offered to link both subsystems, but the full migration is preferred. KIE server is ready to migrate with a few jboss-cli operations. Give it a try, really worth it! Featured photo by Martin Cimbalek The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sTStztYN0xY" height="1" width="1" alt=""/&gt;</content><dc:creator>Gonzalo Muñoz Fernández</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/migrating-jbpm-images-secured-by-ldap-to-elytron.html</feedburner:origLink></entry><entry><title type="html">VU Alumni Spotlight - Open Key to Every Career (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FS3wLbsAxfU/vu-alumni-spotlight-open-key-to-every-career.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/GAVXuHfmkKs/vu-alumni-spotlight-open-key-to-every-career.html</id><updated>2021-02-25T15:00:00Z</updated><content type="html"> As previously mentioned, I was invited to speak today as part of the VU alumni spotlight series.  I spent the time sharing how being open can mean everything to your career. It's something that has been core to my journey throughout my working life and striving to help others only lifts your own path. It's amazing to see how many people just need to slightly adjust their way of doing things to become that catalyst in another person's journey through life. If you were unable to join, or just didn't have the time, no worries, I've posted the slides from the session online below. The following was shared online in a virtual event with anyone wanting to attend, first the abstract and then the slides themselves. OPEN IS KEY TO EVERY CAREER  It's not a coincidence. It's not just luck. It's not going to happen by itself, so what's the secret sauce for accelerating your career path? Understanding what makes a career grow, what choices are crucial, and what actions accelerate or damage your future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in an open source world is what this session provides. Be ready for your next career step using open source principles. Join me for a story sharing a clear and easy to use plan for jump starting your career immediately. Hope you enjoyed this session and feel free to reach out in the comments or contact me through this site.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FS3wLbsAxfU" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/GAVXuHfmkKs/vu-alumni-spotlight-open-key-to-every-career.html</feedburner:origLink></entry><entry><title type="html">Predictions in Kogito: PMML endpoints with OpenAPI</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7_9ETYAuuoU/predictions-in-kogito-pmml-endpoints-with-openapi.html" /><author><name>Gabriele Cardosi</name></author><id>https://blog.kie.org/2021/02/predictions-in-kogito-pmml-endpoints-with-openapi.html</id><updated>2021-02-25T11:36:06Z</updated><content type="html">INTRODUCTION is an XML standard whose scope is to define different kinds of predictive models (Regression, Scorecard, Tree, Neural Network, etc) in a system-agnostic way, so that it may be used and shared by different systems/implementations. The Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. Beginning in January 2020 a new initiative, , has started to provide a fast, reliable implementation natively available inside Drools and Kogito. Recently, a new feature has been added to implement OpenAPI usage in PMML-specific rest-endpoints created by the Kogito framework, for both Quarkus and Springboot environments. PREDICTIONS IN KOGITO The PMML-Trusty engine is exposed in Kogito through rest endpoints. This allows an extremely easy way to create a PMML executor that, at the same time, is available through easy-to-use, standard, language agnostic rest endpoints. A bare-minimum Kogito project requires some PMML files in the resources folder and a configuration yaml. Here are and example projects. During Kogito code generation, engine-specific classes are created out of the models found in the given PMML files.  Then, for each model a Rest class is created, whose root path is derived from the model name. Inside this class there are two specific endpoints: 1. result (“{root_path}/”) 2. descriptive (“{root_path}/descriptive”) The first endpoint will return only the raw result of model evaluation, while the second one will return a complex object containing additional information and metadata. OPENAPI REST ENDPOINTS The generated endpoints are further enriched with OpenAPI metadata.  For each model a json-schema file is created, containing the descriptive representation of: 1. requested input (InputSet) 2. (raw) result output (ResultSet) 3. descriptive output (OutputSet) Here’s the overall skeleton of a generated json schema: { "definitions": { "OutputSet": { "type": "object", "properties": { ... } }, "InputSet": { "type": "object", ... } }, "ResultSet": { "type": "object", "properties": { ... } } } } An extremely useful feature is the ability to propagate the model requirements/constraints to the final consumer, for example, the valid values for a string field or the allowed ranges for numeric values. The following snippet shows a couple of example about that "resultCode": { "type": "string", "enum": [ "OK", "FAIL" ] } "temperature": { "type": "number", "format": "double", "intervals": [ "-∞ -10", "-10 10", "10 ∞" ] } When rendered inside the html page, such metadata will be shown, providing help on endpoint usage to the final end user.  A couple of images will give an idea on how the pages would look like for PMML endpoints: Quarkus (http://{server_url:port}/q/swagger-ui/#/) Descriptive endpoint CONCLUSION OpenAPI-enriched Rest-endpoints provides a useful feature to help end users in the rest-endpoint usage and, at the same time, to write more robust program-driven consumers. Exposing input and output schemas in json format allows the developer to write code that 1. retrieves the required fields and formats 2. submit data for evaluation 3. analyze or manage returned values in the light of the expected output The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7_9ETYAuuoU" height="1" width="1" alt=""/&gt;</content><dc:creator>Gabriele Cardosi</dc:creator><feedburner:origLink>https://blog.kie.org/2021/02/predictions-in-kogito-pmml-endpoints-with-openapi.html</feedburner:origLink></entry><entry><title>Debuginfod project update: New clients and metrics</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HjwEeUCpquU/" /><category term="Developer Tools" /><category term="Linux" /><category term="debuginfo" /><category term="debuginfod" /><category term="elfutils" /><category term="monitoring" /><author><name>Aaron Merey</name></author><id>https://developers.redhat.com/blog/?p=827527</id><updated>2021-02-25T08:00:27Z</updated><published>2021-02-25T08:00:27Z</published><content type="html">&lt;p&gt;It&amp;#8217;s been about a year since our last update about &lt;code&gt;debuginfod&lt;/code&gt;, an HTTP file server that serves debugging resources to debugger-like tools. Since then, we&amp;#8217;ve been busy integrating clients across a range of developer tools and improving the server&amp;#8217;s available metrics. This article covers the features and improvements we&amp;#8217;ve added to &lt;code&gt;debuginfod&lt;/code&gt; since our last update.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For an introduction to &lt;code&gt;debuginfod&lt;/code&gt; and how to use it, check out our &lt;a href="https://developers.redhat.com/blog/2019/10/14/introducing-debuginfod-the-elfutils-debuginfo-server/"&gt;first article introducing debuginfod&lt;/a&gt; and the follow-up explaining &lt;a href="https://developers.redhat.com/blog/2019/12/17/deploying-debuginfod-servers-for-your-developers/"&gt;how to set up your own debuginfod services&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New debuginfod clients&lt;/h2&gt; &lt;p&gt;Debuginfod is a part of the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/elfutils/"&gt;elfutils&lt;/a&gt; project. Tools that already use elfutils to find or analyze debugging resources automatically inherit &lt;code&gt;debuginfod&lt;/code&gt; support. Tools like &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/systemtap/"&gt;Systemtap&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/libabigail/"&gt;Libabigail&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://pmachata.github.io/dwgrep/"&gt;dwgrep&lt;/a&gt; all inherit &lt;code&gt;debuginfod&lt;/code&gt; this way. In Systemtap, for example, &lt;code&gt;debuginfod&lt;/code&gt; offers new ways to specify which processes to probe. Previously, if you wanted to explore a running user process, you would have to provide either a process identifier (PID) or the executable path. With &lt;code&gt;debuginfod&lt;/code&gt;, Systemtap can probe processes according to &lt;code&gt;build-id&lt;/code&gt;, as well. So, it is possible to investigate specific versions of a binary independently from the location of the corresponding executable file.&lt;/p&gt; &lt;p&gt;Debuginfod includes a client library (&lt;code&gt;libdebuginfod&lt;/code&gt;) that lets other tools easily query &lt;code&gt;debuginfod&lt;/code&gt; servers for source files, executables, and of course, &lt;code&gt;debuginfo&lt;/code&gt;—generally, DWARF (debugging with attributed record format) &lt;code&gt;debuginfo&lt;/code&gt;. Since last year, a variety of developer tools have integrated &lt;code&gt;debuginfod&lt;/code&gt; clients. As of version 2.34, &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/binutils/"&gt;Binutils&lt;/a&gt; includes &lt;code&gt;debuginfod&lt;/code&gt; support for its components that use separate &lt;code&gt;debuginfo&lt;/code&gt; (&lt;code&gt;readelf&lt;/code&gt; and &lt;code&gt;objdump&lt;/code&gt;). Starting in version 9.03, the &lt;a href="https://developers.redhat.com/blog/2018/02/20/annobin-storing-information-binaries/"&gt;Annobin&lt;/a&gt; project contains &lt;code&gt;debuginfod&lt;/code&gt; support for fetching separate &lt;code&gt;debuginfo&lt;/code&gt; files, and support for &lt;a target="_blank" rel="nofollow" href="https://dyninst.org/"&gt;Dyninst&lt;/a&gt; is planned in version 10.3.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/gdb/"&gt;GDB&lt;/a&gt; 10.1 was recently released with &lt;code&gt;debuginfod&lt;/code&gt; support, making it easy to download any missing &lt;code&gt;debuginfo&lt;/code&gt; or source files on-the-fly as you debug your programs, whether the files are for the executable being debugged or any shared libraries used by the executable. GDB also uses improvements to the &lt;code&gt;libdebuginfod&lt;/code&gt; API, including programmable progress updates, as shown in the following example (note that this output is abridged for clarity):&lt;/p&gt; &lt;pre&gt;$ gdb /usr/bin/python Reading symbols from /usr/bin/python... Downloading separate debug info for /usr/bin/python (gdb) list Downloading source file /usr/src/debug/python3-3.8.6-1.fc32.x86_64/Programs/python.c... 8 wmain (int argc, wchar_t **argv) 9 { 10 return Py_Main(argc, argv) 11 } (gdb) break main Breakpoint 1 at 0x1140: file /usr/src/debug/python3-3.8.6-1.fc32.x86_64/Programs/python.c, line 16. (gdb) run Starting program: /usr/bin/python Downloading separate debug info for /lib64/ld-linux-x86-64.so.2... Downloading separate debug info for /lib64/libc.so.6... Downloading separate debug info for /lib64/libpthread.so.0... [...] &lt;/pre&gt; &lt;p&gt;Configuring &lt;code&gt;debuginfod&lt;/code&gt; to supply all of these tools with debugging resources is as simple as setting an environment variable (&lt;code&gt;DEBUGINFOD_URLS&lt;/code&gt;) with the URLs of &lt;code&gt;debuginfod&lt;/code&gt; servers. In case you don&amp;#8217;t want to set up your own server, we also provide servers that include debugging resources for many common Fedora, CentOS, Ubuntu, Debian, and OpenSUSE packages.  For more information, explore the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/elfutils/Debuginfod.html"&gt;elfutils debuginfod page&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;New debuginfod server metrics&lt;/h2&gt; &lt;p&gt;Operating a &lt;code&gt;debuginfod&lt;/code&gt; server for other people is a pleasure and a chore. Once you have users, they will expect the service to stay up. While &lt;code&gt;debuginfod&lt;/code&gt; is a simple server, it still needs monitoring and management. With that in mind, &lt;code&gt;debuginfod&lt;/code&gt; comes with the usual logging-to-stderr flags, which are tailor-made for container or systemd operation. (Add another &lt;code&gt;-v&lt;/code&gt; for more information.) Additionally, &lt;code&gt;debuginfod&lt;/code&gt; offers a web API for sharing a variety of metrics about its internal operations. These metrics are exported in &lt;a target="_blank" rel="nofollow" href="https://prometheus.io/docs/instrumenting/exposition_formats/"&gt;Prometheus&lt;/a&gt;, which is industry-standard, human-readable, and comes with numerous consumer and processing tools. The metrics are designed to let you see what its various threads are doing, how they&amp;#8217;re progressing with their workloads, and what types of errors they&amp;#8217;ve encountered. When archived in a time-series database and lightly analyzed, the metrics might help you derive all sorts of neat quantities guiding resource allocation.&lt;/p&gt; &lt;h2&gt;Configuring Prometheus for debuginfod&lt;/h2&gt; &lt;p&gt;To configure a Prometheus server to scrape &lt;code&gt;debuginfod&lt;/code&gt; metrics, add a clause for HTTP or HTTPS to the &lt;code&gt;prometheus.yml&lt;/code&gt; configuration file, as shown here:&lt;/p&gt; &lt;pre&gt; scrape_configs: - job_name: 'debuginfod' scheme: http static_configs: - targets: ['localhost:8002'] - job_name: 'debuginfod-https' scheme: https static_configs: - targets: ['debuginfod.elfutils.org'] # adjust &lt;/pre&gt; &lt;p&gt;Adjust the global &lt;code&gt;scrape_interval&lt;/code&gt; if you like. Debuginfod can handle &lt;code&gt;/metrics&lt;/code&gt; queries quickly. Let it run a while, then let&amp;#8217;s take a tour of the metrics.&lt;/p&gt; &lt;h2&gt;Visualizing debuginfod metrics&lt;/h2&gt; &lt;p&gt;When &lt;code&gt;debuginfod&lt;/code&gt; is directed to scan a large directory of archives or files for the first time, it uses a pool of threads (&lt;code&gt;-c option&lt;/code&gt;) to decompress and parse them. This activity can be I/O and CPU intensive, and ideally both! How can we tell? Look at the &lt;em&gt;scanned_bytes_total&lt;/em&gt; metric, which tabulates the total size of input files &lt;code&gt;debuginfod&lt;/code&gt; processed. When converted to a rate, it is close to the read throughput of the source filesystem.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The following screenshots were generated from built-in Prometheus graphs, but you could use another visualizer like &lt;a target="_blank" rel="nofollow" href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Measuring total bytes scanned&lt;/h3&gt; &lt;p&gt;The graph in Figure 1 represents an intensive scan job where a remote NFS server is feeding &lt;code&gt;debuginfod&lt;/code&gt; at a steady 50MBs for some time, then a less impressive 10MBs later on. We believe Monday&amp;#8217;s arrival was the likely cause for this drop in scanning performance. Developers returned from the weekend and &lt;code&gt;debuginfod&lt;/code&gt; had to share NFS capacity.&lt;/p&gt; &lt;div id="attachment_827637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1.png"&gt;&lt;img aria-describedby="caption-attachment-827637" class="wp-image-827637" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-300x249.png" alt="The graph shows a sudden drop in scanning performance." width="640" height="532" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-300x249.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1-768x638.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm1.png 874w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827637" class="wp-caption-text"&gt;Figure 1: Results from debuginfod&amp;#8217;s scanned_bytes_total metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see, the initial scan goes on and on. Developers keep developing, but the NFS server runs slower and slower. To analyze that, we can look at the &lt;em&gt;thread_work_pending&lt;/em&gt; metric.&lt;/p&gt; &lt;h3&gt;Measuring thread activity&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;thread_work_pending&lt;/em&gt; metric jumps whenever a periodic traversal pass is started (the &lt;code&gt;-t&lt;/code&gt; option and &lt;code&gt;SIGUSR1&lt;/code&gt;) and winds back down to zero as those scanner threads do their work. The graph in Figure 2 represents the five-day period where a multi-terabyte &lt;a href="https://developers.redhat.com/products/rhel/overview"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; RPM dataset was scanned. The gentle slope-periods corresponded to a few packages with a unique combination of enormous RPM sizes and many builds (Kernel, RT-Kernel, Ceph, LibreOffice). Sharp upticks and downticks corresponded to concurrent re-traversals that were immediately dismissed because the indexed data was still fresh. As the line touches zero, the scanning is done. After that, only brief pulses should show.&lt;/p&gt; &lt;div id="attachment_827647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2.png"&gt;&lt;img aria-describedby="caption-attachment-827647" class="wp-image-827647" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-300x250.png" alt="This graph shows sharp upticks and downticks." width="640" height="534" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-300x250.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2-768x640.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm2.png 873w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827647" class="wp-caption-text"&gt;Figure 2: Results from debuginfod&amp;#8217;s thread_work_pending metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Even before all the scanning is finished, the server is ready to answer queries. This is what it&amp;#8217;s all about, after all—letting developers enjoy that sweet nectar of &lt;code&gt;debuginfo&lt;/code&gt;. But how many are using it, and at what cost? Let&amp;#8217;s check the &lt;em&gt;http_responses_total&lt;/em&gt; metric, which counts and classifies web API requests.&lt;/p&gt; &lt;h3&gt;Measuring HTTP responses&lt;/h3&gt; &lt;p&gt;The graph in Figure 3 shows a small peak of errors (unknown &lt;code&gt;build-id&lt;/code&gt;s), a large number of successes (extracting content .rpm), and a very small number of other successes (using the &lt;code&gt;fdcache&lt;/code&gt;). This was the workload from a bulk, distro-wide &lt;code&gt;debuginfod&lt;/code&gt; scan that could not take advantage of any serious caching or prefetching.&lt;/p&gt; &lt;div id="attachment_827657" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3.png"&gt;&lt;img aria-describedby="caption-attachment-827657" class="wp-image-827657" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-300x267.png" alt="The graph shows a sharp incline and a gradual decline." width="640" height="569" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-300x267.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3-768x683.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm3.png 845w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827657" class="wp-caption-text"&gt;Figure 3: Results from debuginfod&amp;#8217;s http_responses_total metric displayed in a Prometheus graph.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s take a look at the cost, too. If you measure cost by bytes by network data, pull up the &lt;em&gt;http_responses_transfer_bytes&lt;/em&gt; pair of metrics. If measuring cost by CPU time, pull up the &lt;em&gt;http_responses_duration_milliseconds&lt;/em&gt; pair of metrics. With a little bit of PromQL, you can compute the average data transfer or processing time.&lt;/p&gt; &lt;h3&gt;Measuring processing time, groom statistics and error counts&lt;/h3&gt; &lt;p&gt;The graph in Figure 4 shows the duration variant for the same time frame in Figure 3. It reveals how the inability to cache or prefetch the results sometimes required tens of seconds of service time, probably from the same large archives that took so long to scan. Configuring aggressive caching could help to create more typical access patterns. See the metrics that mention &lt;code&gt;fdcache&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_827677" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4.png"&gt;&lt;img aria-describedby="caption-attachment-827677" class="wp-image-827677" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-300x230.png" alt="need alt text." width="640" height="490" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-300x230.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4-768x588.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/db-pm4.png 873w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-827677" class="wp-caption-text"&gt;Figure 4: Measuring processing time with debuginfod metrics in Prometheus.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now that your server is up, it will also periodically groom its index (&lt;code&gt;-g&lt;/code&gt; option and &lt;code&gt;SIGUSR2&lt;/code&gt;). As a part of each groom cycle, another set of metrics is updated to provide an overview of the entire index. The last few numbers give an idea of the storage requirements of a fairly large installation: 6.58TB of RPMs, in 76.6GB of index data:&lt;/p&gt; &lt;pre&gt; groom{statistic="archive d/e"} 11837375 groom{statistic="archive sdef"} 152188513 groom{statistic="archive sref"} 2636847754 groom{statistic="buildids"} 11477232 groom{statistic="file d/e"} 0 groom{statistic="file s"} 0 groom{statistic="filenames"} 163330844 groom{statistic="files scanned (#)"} 579264 groom{statistic="files scanned (mb)"} 6583193 groom{statistic="index db size (mb)"} 76662 &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;error_count&lt;/code&gt; metrics track errors from various subsystems of &lt;code&gt;debuginfod&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here, you can see how the errors are categorized by subsystem and type. We hope increases to these metrics can be used to signal a gradual degradation or outright failure. We recommend attaching alerts to them.&lt;/p&gt; &lt;pre&gt; error_count{libc="Connection refused"} 3 error_count{libc="No such file or directory"} 1 error_count{libc="Permission denied"} 33 error_count{libarchive="cannot extract file"} 1 &lt;/pre&gt; &lt;p&gt;Finally, you can use Grafana to scrape the &lt;code&gt;debuginfod&lt;/code&gt; Prometheus server to prepare informative and stylish dashboards, such as the one shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_841147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana.png"&gt;&lt;img aria-describedby="caption-attachment-841147" class="wp-image-841147" src="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-300x231.png" alt="The dashboard displays a variety of debuginfod metrics." width="640" height="493" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-300x231.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana-768x592.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/11/debuginfod-grafana.png 882w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841147" class="wp-caption-text"&gt;Figure 5: Debuginfod metrics displayed on a Grafana dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article was an overview of the new client support and metrics available from &lt;code&gt;debuginfod&lt;/code&gt;. We didn&amp;#8217;t cover all of the available metrics, so feel free to check them out for yourself. If you think of more useful metrics for &lt;code&gt;debuginfod&lt;/code&gt; please get in touch with our developers at elfutils-devel@sourceware.org.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#38;linkname=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F25%2Fdebuginfod-project-update-new-clients-and-metrics%2F&amp;#038;title=Debuginfod%20project%20update%3A%20New%20clients%20and%20metrics" data-a2a-url="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/" data-a2a-title="Debuginfod project update: New clients and metrics"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/"&gt;Debuginfod project update: New clients and metrics&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HjwEeUCpquU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;It&amp;#8217;s been about a year since our last update about debuginfod, an HTTP file server that serves debugging resources to debugger-like tools. Since then, we&amp;#8217;ve been busy integrating clients across a range of developer tools and improving the server&amp;#8217;s available metrics. This article covers the features and improvements we&amp;#8217;ve added to debuginfod since our last [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/"&gt;Debuginfod project update: New clients and metrics&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">827527</post-id><dc:creator>Aaron Merey</dc:creator><dc:date>2021-02-25T08:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/25/debuginfod-project-update-new-clients-and-metrics/</feedburner:origLink></entry><entry><title type="html">Business optimisation architecture - Common architectural elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2ztoiz9pzlw/business-optimisation-common-architectural-elements.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/Dl6AQyo4ff8/business-optimisation-common-architectural-elements.html</id><updated>2021-02-25T06:00:00Z</updated><content type="html">Part 2 - Common architecture elements In from this series I introduced a use case around business optimisation for retail stores. The process was laid out how I've approached the use case and how portfolio solutions are the base for researching a generic architectural blueprint.  The only thing left to cover was the order in which you'll be led through the blueprint details. This article starts the real journey at the very top, with a generic architecture from which we'll discuss the common architectural elements one by one. BLUEPRINTS REVIEW As mentioned before, the architectural details covered here are base on real solutions using open source technologies. The example scenario presented here is a generic common blueprint that was uncovered researching those solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details. This section covers the visual representations as presented, but it's expected that they'll be evolving based on future research. There are many ways to represent each element in this architectural blueprint, but I've chosen a format that I hope makes it easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a look at the details in this blueprint and outline the solution. FROM SPECIFIC TO GENERIC Before diving in to the common elements, it might be nice to understand that this is not a catch all for every possible business optimisation solution. It's a collection of identified elements that I've uncovered in multiple customer implementations. These elements presented here are then the generic common architectural elements that I've identified and collected in to the generic architectural blueprint.  It's my intent to provide a blueprint for guidance and not deep technical details. You're smart enough to figure out wiring integration points in your own architectures. You're capable of slotting in the technologies and components you've committed to in the past where applicable.  It's my job here to describe the architectural blueprint generic components and outline a few specific cases with visual diagrams so that you're able to make the right decisions from the start of your own projects. Another challenge has been how to visually represent the architectural blueprint. There are many ways to represent each element, but I've chosen some icons, text and colours that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a quick tour of the generic architecture and outline the common elements uncovered in my research. EXTERNAL SYSTEMS Starting at the top right of the diagram, which is by no means a geographical necessity, there are two elements that represent external systems that are integrated with the core elements of this architecture.  The first is third-party systems, covering basically everything that customers use from partnering ventors. This can be SaaS solutions or any other third-party backend systems. The second is called internal remote systems, a broad element to contain all other types of backend systems that might be internal to the organisation, but deployed externally to to architecture in use. INFRASTRUCTURE SERVICES These elements in the common architecture are found in every solution researched. They were mentioned by name and consisted of an single-sign-on (SSO) that ensures a smooth interaction between processes, authorisation, authentication, and integration services. The internal local systems, shown with a private cloud icon, can be any backend systems that are managed and deployed in this organisation's infrastructure. CONTAINER PLATFORM Without a doubt, every modern organisation engaged in business optimisation has seen the value of containers and use of a container platform. The container platform provides for one consistent environment for developers and operations to manage services, applications, integration points, process integration, planning services, and security. It's also the one way to ensure you can uniformly leverage the same container infrastructure across a hybrid multicloud environment. It avoids becoming locked into any private or cloud infrastructure as you have an exit strategy with a container platform that's consistent across your architecture. There are a few elements here worth mentioning, first off the use of retail decision microservices for centralising all store business decisions for other services to leverage. An api management element for well defined access to services and processes, and a retail processes element to capture repeatable and sometimes long running store processes. The key element here in our business optimisation use case is of course the retail planning services, the powerful services used to solve many of the issues covered in this use case. Finally, there are elements representing collections of integration microservices and integration data microservices for storage service access. The security aspect is interwoven in the container platform, as each container service, application, or process integration can be plugged in to an organisations authentication and authorization mechanisms. STORAGE SERVICES The storage services uncovered in the research were diverse and numerous. For that reason there is no single common architectural element shown at the highest level. Everything from container native storage to traditional block storage was found. In later articles, when more detail is shown, I'll make a point to present a few of the options chosen by customers integrating data services with processes and applications. WHAT'S NEXT This was just a short overview of the common generic elements that make up our architecture blueprint for omnichannel customer experience use case.  An overview of this series on the business optimisation portfolio architecture blueprint can be found here: 1. 2. 3. Example planning optimisation 4. Example vaccine scheduling Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at an example planning optimisation architecture to provide you with a map for your own optimisation solutions. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2ztoiz9pzlw" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/Dl6AQyo4ff8/business-optimisation-common-architectural-elements.html</feedburner:origLink></entry><entry><title type="html">This Week in JBoss - 25 February 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tfhNxgo1GNY/weekly-2021-02-25.html" /><category term="quarkus" /><category term="wildfly" /><category term="kogito" /><category term="openshift" /><category term="bpm" /><category term="microprofile" /><category term="resteasy" /><category term="keycloak" /><category term="infinispan" /><author><name>Romain Pelisse</name><uri>https://www.jboss.org/people/romain-pelisse</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2021-02-25.html</id><updated>2021-02-25T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, wildfly, kogito, openshift, bpm, microprofile, resteasy, keycloak, infinispan"&gt; &lt;h1&gt;This Week in JBoss - 25 February 2021&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another installment of our JBoss Editorial! Today, we’ll focus on Kogito and the upcoming major release of Wildfly. Enjoy!&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_wildfly_23_beta_microprofile"&gt;Wildfly 23 Beta: Microprofile&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;As the release of the next major version of Wildlfy is coming up soon, Brian Stanberry took the time to write up a brief article on the &lt;a href="https://www.wildfly.org//news/2021/02/24/WildFly23-Beta-Released/"&gt;progress with MicroProfile&lt;/a&gt;. If you have interested in playing with &lt;a href="https://github.com/eclipse/microprofile/releases/tag/4.0"&gt;MicroProfile Platform 4.0&lt;/a&gt; or see tech preview support for &lt;a href="https://github.com/eclipse/microprofile-reactive-messaging/releases/tag/1.0"&gt;MicroProfile Reactive Messaging 1.0&lt;/a&gt;, go check out &lt;a href="https://download.jboss.org/wildfly/23.0.0.Beta1/wildfly-23.0.0.Beta1.zip"&gt;Wildfly 23 Beta1&lt;/a&gt; and let us know what you think!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kogito"&gt;Kogito&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;If you are already a Kogito user or if you are interested in exploring this software, there were a few articles released in the past two weeks that you might find interesting. The first one is on &lt;a href="https://blog.kie.org/2021/02/kogito-notifications-api.html"&gt;Kogito Notification API&lt;/a&gt; which is followed nicely by the second one on &lt;a href="https://blog.kie.org/2021/02/event-driven-decisions-with-kogito.html"&gt;Event-driven decisions with Kogito&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want something more practical, you’ll certainly enjoy the third article on &lt;a href="https://blog.kie.org/2021/02/3-steps-to-author-bpmn-dmn-editors-on-github-codespaces.html"&gt;3 steps to author BPMN and DMN assets on GitHub Codespaces&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_quarkus_fast_jar_as_default_multipart_support_for_resteasy_reactive"&gt;Quarkus: Fast jar as default, Multipart support for RESTEasy Reactive&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Following up the recent release of &lt;a href="https://quarkus.io/blog/quarkus-1-11-3-final-released/"&gt;Quarkus 1.11.3.Final&lt;/a&gt;, &lt;a href="https://quarkus.io/blog/quarkus-1-12-0-final-released/"&gt;Quarkus 1.12 was just released&lt;/a&gt; and includes some exciting new features. First, fast jar is now by default and the framework added multipart support for RESTEasy Reactive. Go check it out!&lt;/p&gt; &lt;p&gt;And if you have not yet looked into Quarkus, a new tutorial has been released: &lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;Enhancing the development loop with Quarkus remote development&lt;/a&gt;, so it’s the perfect opportunity to explore the framework potential and test it over OpenShift.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_evangelists_corner"&gt;Evangelist’s Corner&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;As always, our very own Eric Schabell has provided the community with quite a lot of content in the last two weeks. First, you have a nice &lt;a href="https://www.schabell.org/2021/02/business-optimisation-an-introduction.html"&gt;introduction to Business optimization architecture&lt;/a&gt;, which can be followed by this other piece on &lt;a href="https://www.schabell.org/2021/02/business-optimisation-common-architectural-elements.html"&gt;Business optimization architecture - Common architectural elements&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Of course, Eric has not forgotten the famous OpenShift and delivered a pretty nifty &lt;a href="https://www.schabell.org/2021/03/refcard-getting-started-with-openshift.html"&gt;RefCard - Getting started with OpenShift&lt;/a&gt; published for DZone. Go grab it!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_releases"&gt;Releases!&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-1-12-0-final-released/"&gt;Quarkus 1.12 released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://download.jboss.org/wildfly/23.0.0.Beta1/wildfly-23.0.0.Beta1.zip"&gt;Wildfly 23 Beta1 is now available&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://resteasy.github.io/2021/02/18/resteasy-3.15.0.Final/"&gt;RESTEasy 3.15.0.Final is now available&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://bytemanblog.blogspot.com/2021/02/byteman-4014-has-been-released.html"&gt;Byteman 4.0.14 has been released &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://www.keycloak.org//2021/02/keycloak-1203-released.html"&gt;Keycloak 12.0.3 released&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://infinispan.org/blog/2021/02/12/infinispan-12-0-1"&gt;Infinispan 12.0.1.Final "Lockdown"&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;That’s all for today! Please join us again in two weeks for another installment of our JBoss editorial! Stay safe and healthy in the meantime.&lt;/em&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/romain-pelisse.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Romain Pelisse&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tfhNxgo1GNY" height="1" width="1" alt=""/&gt;</content><dc:creator>Romain Pelisse</dc:creator><feedburner:origLink>https://www.jboss.org/posts/weekly-2021-02-25.html</feedburner:origLink></entry><entry><title>Custom policies in Red Hat 3scale API Management, Part 1: Overview</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/beypzRAjn5M/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Modern App Dev" /><category term="3scale API Management" /><category term="API policies" /><category term="custom policies" /><category term="policy chaining" /><author><name>Satya Jayanti</name></author><id>https://developers.redhat.com/blog/?p=869677</id><updated>2021-02-24T08:00:50Z</updated><published>2021-02-24T08:00:50Z</published><content type="html">&lt;p&gt;API management platforms such as &lt;a href="https://developers.redhat.com/products/3scale/overview"&gt;Red Hat 3scale API Management&lt;/a&gt; provide an API gateway as a reverse proxy between API requests and responses. In this stage, most API management platforms optimize the request-response pathway and avoid introducing complex processing and delays. Such platforms provide minimal policy enforcement such as authentication, authorization, and rate-limiting. With the proliferation of API-based integrations, however, customers are demanding more fine-tuned capabilities.&lt;/p&gt; &lt;p&gt;Policy frameworks are key to adding new capabilities to the API request and response lifecycle. In this series, you will learn about the Red Hat 3scale API Management policy framework and how to use it to configure custom policies in the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.6/html/administering_the_api_gateway/index"&gt;APIcast API gateway&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Policy enforcement with 3scale API Management&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/index"&gt;APIcast&lt;/a&gt; is 3scale API Management&amp;#8217;s default data-plane gateway and policy enforcement point for API requests and responses. Its core functionality is to enforce rate limits, report methods and metrics, and use the mapping paths and security specified for each API defined in the 3scale API manager.&lt;/p&gt; &lt;p&gt;APIcast is built on &lt;a target="_blank" rel="nofollow" href="https://www.nginx.com/"&gt;NGINX&lt;/a&gt;. It is a custom implementation of a reverse proxy using the &lt;a target="_blank" rel="nofollow" href="https://openresty.org/en/resources.html"&gt;OpenResty&lt;/a&gt; framework, with modules written in &lt;a target="_blank" rel="nofollow" href="https://www.lua.org/docs.html"&gt;Lua&lt;/a&gt;. Most NGINX functionality is implemented using modules, which are controlled by directives specified in a configuration file.&lt;/p&gt; &lt;p&gt;APIcast enforces API configuration rules that are set in the 3scale API manager. It authenticates new requests by connecting to the service API exposed by the API manager. It also allows access to the backend API and reports usage. Figure 1 presents a high-level view of APIcast in 3scale API Management&amp;#8217;s API request and response flow.&lt;/p&gt; &lt;div id="attachment_742967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png"&gt;&lt;img aria-describedby="caption-attachment-742967" wp-image-742967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png" alt="A diagram of APIcast in the 3scale API Management request and response flow." width="640" height="436" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-1024x698.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-300x205.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram-768x524.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/3scale-High-level-diagram.png 1154w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742967" class="wp-caption-text"&gt;Figure 1: APIcast in the 3scale API Management API request and response flow.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;The default APIcast policy&lt;/h2&gt; &lt;p&gt;A default APIcast policy interprets the standard configuration and provides API gateway functionality. The default policy acts as the API&amp;#8217;s entry point to the gateway and must be enabled for all APIs configured in 3scale API Management. The APIcast policy ensures that API requests are handled using the rules configured in the API manager. The configuration is provided to the APIcast gateway as a JSON specification, which APIcast downloads from the 3scale API Management portal.&lt;/p&gt; &lt;p&gt;Each HTTP request passes through a sequence of &lt;a target="_blank" rel="nofollow" href="http://nginx.org/en/docs/dev/development_guide.html#http_phases"&gt;phases&lt;/a&gt;. A distinct type of processing is performed on the request in each phase. Module-specific handlers can be registered in most phases, and many standard NGINX modules register their phase handlers so that they will be called at a specific stage of request processing. Phases are processed successively, and phase handlers are called once the request reaches the phase.&lt;/p&gt; &lt;p&gt;To customize request processing, we can register additional modules at the appropriate phase. 3scale API Management provides standard policies that are pre-built as NGINX modules and can be plugged into each service&amp;#8217;s request.&lt;/p&gt; &lt;h2&gt;Custom APIcast policies&lt;/h2&gt; &lt;p&gt;In addition to the default policy, 3scale API Management provides custom policies that can be configured to each API. Using modules and configurations, these policies provide custom features for handling API requests and responses. Using custom modules makes the APIcast gateway highly customizable. It is possible to add custom processing and functionality on demand without modifying API gateway code or writing any additional code.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/administering_the_api_gateway/apicast_policies#standard-policies"&gt;chapter on APIcast policies&lt;/a&gt; in the 3sale API Management documentation for a list of all the standard policies that are available to be configured directly with APIcast.&lt;/p&gt; &lt;h2&gt;Policy chaining&lt;/h2&gt; &lt;p&gt;Policies must be placed in order of execution priority, and this placement is called &lt;em&gt;policy chaining&lt;/em&gt;. Policy chains affect the default behavior of any combination of policies. The default APIcast policy should be part of the policy chain. If a custom policy needs to be evaluated before the APIcast policy, it must be placed before that policy in the chain. Figure 2 shows an example of the policy order as defined in the policy chain.&lt;/p&gt; &lt;div id="attachment_872307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png"&gt;&lt;img aria-describedby="caption-attachment-872307" class="wp-image-872307" src="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png" alt="A diagram of the custom policy chain." width="640" height="480" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain.png 960w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain-300x225.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/02/Policy-Chain-768x576.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-872307" class="wp-caption-text"&gt;Figure 2: A custom URL-rewriting policy in the policy chain.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For example, take a scenario using a URL-rewriting policy to change the URL path from &lt;em&gt;/A/B&lt;/em&gt; to &lt;em&gt;/B&lt;/em&gt;. Placing the URL-rewriting policy before the APIcast policy ensures that the path is changed before gateway processing. Backend rules, mapping rules, and metrics all will be evaluated using the &lt;em&gt;/B&lt;/em&gt; URL path.&lt;/p&gt; &lt;p&gt;If, on the other hand, the custom policy should be evaluated &lt;em&gt;after&lt;/em&gt; the APIcast policy, you can reverse the order. As an example, if you wanted the mapping rules to be evaluated for &lt;em&gt;/A/B&lt;/em&gt;, with the URL rewrite to &lt;em&gt;/B&lt;/em&gt; applied afterward, then you would place the URL rewriting policy after the APIcast policy.&lt;/p&gt; &lt;h2&gt;Configuring custom policies&lt;/h2&gt; &lt;p&gt;There are two ways to add a new policy to an API. One option is to use the Policy section for each managed API in the 3scale API Management Admin Portal. All of the available policies are available to be added. If you prefer to use the Admin API, then you can provide the policy as a JSON specification, which you can upload to the service configuration using the provided REST API.&lt;/p&gt; &lt;p&gt;You also can copy a set of policies as part of the service configuration from one running environment to another using the &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_3scale_api_management/2.9/html/operating_3scale/the-threescale-toolbox"&gt;3scale Toolbox&lt;/a&gt;. To verify the set of policies applied to a specific API, you can download the current configuration and configuration history from the administration portal or using the provided REST API.&lt;/p&gt; &lt;p&gt;Check the video below for a demonstration of the policy configuration in 3scale API Management.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/8R5FvYE9JC0?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;3scale API Management provides multiple options for configuring custom API policies. This article introduced the 3scale API Management policy framework, custom policies, and policy chaining. I also presented a brief example of how to configure and view policies in 3scale API Management. Future articles in this series will look at the available policies, and I will introduce the developer toolset that you can use to create your own custom policies. In the meantime, you can explore 3scale API Management by signing up for a &lt;a target="_blank" rel="nofollow" href="https://www.3scale.net/signup"&gt;free 3scale API Management account&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#38;linkname=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F02%2F24%2Fcustom-policies-in-red-hat-3scale-api-management-part-1-overview%2F&amp;#038;title=Custom%20policies%20in%20Red%20Hat%203scale%20API%20Management%2C%20Part%201%3A%20Overview" data-a2a-url="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/" data-a2a-title="Custom policies in Red Hat 3scale API Management, Part 1: Overview"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/"&gt;Custom policies in Red Hat 3scale API Management, Part 1: Overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/beypzRAjn5M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;API management platforms such as Red Hat 3scale API Management provide an API gateway as a reverse proxy between API requests and responses. In this stage, most API management platforms optimize the request-response pathway and avoid introducing complex processing and delays. Such platforms provide minimal policy enforcement such as authentication, authorization, and rate-limiting. With the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/"&gt;Custom policies in Red Hat 3scale API Management, Part 1: Overview&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">869677</post-id><dc:creator>Satya Jayanti</dc:creator><dc:date>2021-02-24T08:00:50Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/02/24/custom-policies-in-red-hat-3scale-api-management-part-1-overview/</feedburner:origLink></entry><entry><title type="html">WildFly 23 Beta1 — More Progress with MicroProfile</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YLmlOLOPFIE/" /><author><name>Brian Stansberry</name></author><id>https://wildfly.org//news/2021/02/24/WildFly23-Beta-Released/</id><updated>2021-02-24T00:00:00Z</updated><content type="html">I’m pleased to announce that the new WildFly and WildFly Preview 23.0.0.Beta1 releases are available for download at . The WildFly 23 development cycle has been a bit shorter than our typical three months, as we’ve reduced this one some to see if we can get on a rough cadence of Final releases in March/June/September/December. That works well for avoiding releases during the peak summer and year end holiday periods. And the cycle was even shorter in practice due to the normal year end slowdown. But we got a lot done! The biggest thing we’ve done is update all our of Eclipse MicroProfile implementations to the versions. We’ve also added tech preview support for . There are lots of other features and fixes in WildFly 23 Beta1. I’ll wait for the Final release in a couple weeks to get into more details, but the release notes for the release are , with issues fixed in the underlying WildFly Core beta listed . Please try it out and give us your feedback, while we get to work WildFly 23 Final! Best regards, Brian&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YLmlOLOPFIE" height="1" width="1" alt=""/&gt;</content><dc:creator>Brian Stansberry</dc:creator><feedburner:origLink>https://wildfly.org//news/2021/02/24/WildFly23-Beta-Released/</feedburner:origLink></entry></feed>
